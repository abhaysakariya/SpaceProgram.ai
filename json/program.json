{
  "Question 1": "How to find the factorial of a number in Python?",
  "Answer 1": "To find the factorial of a number in Python, you can use a recursive or iterative approach. Here's an example using recursion:<br><div class='codediv'><p>python<br>def factorial(n):<br>    if n == 0:<br>        return 1<br>    else:<br>        return n * factorial(n - 1)<br>num = 5<br>print(factorial(num))  # Output: 120<br><p></div><br>In this example, the `factorial()` function calculates the factorial of a given number `n`. The base case is when `n` is 0, in which case the function returns 1. Otherwise, it recursively calls itself with `n-1` and multiplies it by `n` until the base case is reached.",
  
  "Question 2": "How to reverse a string in Python?",
  "Answer 2": "To reverse a string in Python, you can use string slicing. Here's an example:<br>```python<br>string = 'Hello, World!'<br>reversed_string = string[::-1]<br>print(reversed_string)  # Output: '!dlroW ,olleH'<br>```<br>In this example, the `[::-1]` slicing syntax is used to reverse the string. It creates a new string with a step of -1, which means it starts from the end and goes backwards, effectively reversing the original string.",
  
  "Question 3": "How to check if a string is a palindrome in Python?",
  "Answer 3": "To check if a string is a palindrome in Python, you can compare the string with its reverse. Here's an example:<br>```python<br>def is_palindrome(string):<br>    reversed_string = string[::-1]<br>    return string == reversed_string<br>word = 'radar'<br>print(is_palindrome(word))  # Output: True<br>```<br>In this example, the `is_palindrome()` function takes a string as input and compares it with its reverse. If the original string is equal to its reverse, then it is a palindrome.",
  
  "Question 4": "How to find the largest element in a list in Python?",
  "Answer 4": "To find the largest element in a list in Python, you can use the `max()` function. Here's an example:<br>```python<br>numbers = [5, 10, 3, 8, 1]<br>largest = max(numbers)<br>print(largest)  # Output: 10<br>```<br>In this example, the `max()` function is used to find the largest element in the `numbers` list.",
  
  "Question 5": "How to count the occurrence of an element in a list in Python?",
  "Answer 5": "To count the occurrence of an element in a list in Python, you can use the `count()` method. Here's an example:<br>```python<br>fruits = ['apple', 'banana', 'apple', 'orange', 'apple']<br>count = fruits.count('apple')<br>print(count)  # Output: 3<br>```<br>In this example, the `count()` method is called on the `fruits` list to count the occurrences of the element `'apple'`.",
  
  "Question 6": "How to find the common elements between two lists in Python?",
  "Answer 6": "To find the common elements between two lists in Python, you can use the `intersection()` method or the `set()` function. Here's an example using the `set()` function:<br>```python<br>list1 = [1, 2, 3, 4, 5]<br>list2 = [4, 5, 6, 7, 8]<br>common = list(set(list1) & set(list2))<br>print(common)  # Output: [4, 5]<br>```<br>In this example, the `set()` function is used to convert both lists into sets, which eliminates duplicate elements. The `&` operator is then used to find the intersection between the two sets, giving the common elements.",
  
  "Question 7": "How to remove duplicates from a list in Python?",
  "Answer 7": "To remove duplicates from a list in Python, you can convert it to a set and then back to a list. Here's an example:<br>```python<br>numbers = [1, 2, 2, 3, 4, 4, 5]<br>unique_numbers = list(set(numbers))<br>print(unique_numbers)  # Output: [1, 2, 3, 4, 5]<br>```<br>In this example, the `set()` function is used to convert the `numbers` list to a set, which automatically removes duplicates. Then, the resulting set is converted back to a list using the `list()` constructor.",
  
  "Question 8": "How to sort a list in ascending order in Python?",
  "Answer 8": "To sort a list in ascending order in Python, you can use the `sort()` method or the `sorted()` function. Here's an example using the `sort()` method:<br>```python<br>numbers = [5, 2, 1, 3, 4]<br>numbers.sort()<br>print(numbers)  # Output: [1, 2, 3, 4, 5]<br>```<br>In this example, the `sort()` method is called on the `numbers` list to sort it in ascending order. The original list is modified in-place.",
  
  "Question 9": "How to find the second largest element in a list in Python?",
  "Answer 9": "To find the second largest element in a list in Python, you can sort the list in descending order and then access the element at index 1. Here's an example:<br>```python<br>numbers = [5, 2, 8, 1, 9, 3]<br>numbers.sort(reverse=True)<br>second_largest = numbers[1]<br>print(second_largest)  # Output: 8<br>```<br>In this example, the `sort()` method is called on the `numbers` list with the `reverse=True` argument to sort it in descending order. The second largest element can then be accessed using index 1.",
  
  "Question 10": "How to merge two dictionaries in Python?",
  "Answer 10": "To merge two dictionaries in Python, you can use the `update()` method. Here's an example:<br>```python<br>dict1 = {'a': 1, 'b': 2}<br>dict2 = {'c': 3, 'd': 4}<br>dict1.update(dict2)<br>print(dict1)  # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}<br>```<br>In this example, the `update()` method is called on `dict1` with `dict2` as the argument. This merges the key-value pairs from `dict2` into `dict1`.",
  
  "Question 11": "How to read a file in Python?",
  "Answer 11": "To read a file in Python, you can use the `open()` function. Here's an example:<br>```python<br>file_path = 'data.txt'<br>with open(file_path, 'r') as file:<br>    content = file.read()<br>    print(content)<br>```<br>In this example, the `open()` function is used to open the file specified by `file_path` in read mode (`'r'`). The file is read using the `read()` method, and its contents are stored in the `content` variable. Finally, the content is printed.",
  
  "Question 12": "How to write to a file in Python?",
  "Answer 12": "To write to a file in Python, you can use the `open()` function with the file mode set to write (`'w'`). Here's an example:<br>```python<br>file_path = 'output.txt'<br>data = 'Hello, World!'<br>with open(file_path, 'w') as file:<br>    file.write(data)<br>```<br>In this example, the `open()` function is used to open the file specified by `file_path` in write mode (`'w'`). The file is written with the data using the `write()` method. If the file already exists, its previous contents will be overwritten.",
  
  "Question 13": "How to check if a file exists in Python?",
  "Answer 13": "To check if a file exists in Python, you can use the `os.path.exists()` function. Here's an example:<br>```python<br>import os<br>file_path = 'data.txt'<br>if os.path.exists(file_path):<br>    print('File exists')<br>else:<br>    print('File does not exist')<br>```<br>In this example, the `os.path.exists()` function is used to check if the file specified by `file_path` exists. If it does, the message 'File exists' is printed; otherwise, 'File does not exist' is printed.",
  
  "Question 14": "How to create a directory in Python?",
  "Answer 14": "To create a directory in Python, you can use the `os.makedirs()` function. Here's an example:<br>```python<br>import os<br>directory = 'data'<br>os.makedirs(directory)<br>```<br>In this example, the `os.makedirs()` function is used to create a directory named `'data'`. If the directory already exists, no error will be thrown.",
  
  "Question 15": "How to list files and directories in a directory in Python?",
  "Answer 15": "To list files and directories in a directory in Python, you can use the `os.listdir()` function. Here's an example:<br>```python<br>import os<br>directory = 'data'<br>contents = os.listdir(directory)<br>for item in contents:<br>    print(item)<br>```<br>In this example, the `os.listdir()` function is used to get a list of files and directories within the `'data'` directory. The contents are then printed using a for loop.",
  
  "Question 16": "How to remove a file in Python?",
  "Answer 16": "To remove a file in Python, you can use the `os.remove()` function. Here's an example:<br>```python<br>import os<br>file_path = 'data.txt'<br>os.remove(file_path)<br>```<br>In this example, the `os.remove()` function is used to delete the file specified by `file_path`. If the file does not exist, an error will be thrown.",
  
  "Question 17": "How to remove a directory in Python?",
  "Answer 17": "To remove a directory in Python, you can use the `os.rmdir()` function. Here's an example:<br>```python<br>import os<br>directory = 'data'<br>os.rmdir(directory)<br>```<br>In this example, the `os.rmdir()` function is used to remove the directory specified by `directory`. The directory must be empty for the function to succeed. If the directory contains files or other directories, an error will be thrown.",
  
  "Question 18": "How to rename a file or directory in Python?",
  "Answer 18": "To rename a file or directory in Python, you can use the `os.rename()` function. Here's an example:<br>```python<br>import os<br>old_name = 'data.txt'<br>new_name = 'data_new.txt'<br>os.rename(old_name, new_name)<br>```<br>In this example, the `os.rename()` function is used to rename the file `'data.txt'` to `'data_new.txt'`. The function takes the current name as the first argument and the new name as the second argument.",
  
  "Question 19": "How to get the current working directory in Python?",
  "Answer 19": "To get the current working directory in Python, you can use the `os.getcwd()` function. Here's an example:<br>```python<br>import os<br>cwd = os.getcwd()<br>print(cwd)<br>```<br>In this example, the `os.getcwd()` function is used to get the current working directory, and it is stored in the `cwd` variable. The current working directory is the directory from which the Python script is being executed.",
  
  "Question 20": "How to execute shell commands in Python?",
  "Answer 20": "To execute shell commands in Python, you can use the `os.system()` function or the `subprocess.run()` function. Here's an example using `os.system()`:<br>```python<br>import os<br>command = 'ls -l'<br>os.system(command)<br>```<br>In this example, the `os.system()` function is used to execute the shell command `'ls -l'`, which lists the files and directories in the current directory. The output of the command will be displayed in the console.",
  
  "Question 21": "How to handle exceptions in Python?",
  "Answer 21": "To handle exceptions in Python, you can use a try-except block. Here's an example:<br>```python<br>try:<br>    num = int(input('Enter a number: '))<br>    result = 10 / num<br>    print('Result:', result)<br>except ZeroDivisionError:<br>    print('Error: Cannot divide by zero')<br>except ValueError:<br>    print('Error: Invalid input')<br>```<br>In this example, the `try` block contains the code that may raise an exception. If an exception occurs, it is caught by the corresponding `except` block. In this case, if a `ZeroDivisionError` or a `ValueError` occurs, the respective error message will be printed."
  
  
}